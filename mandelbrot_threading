#6101012620130
import threading
import time
import cmath
import pygame
from random import randint, randrange, random
n = 2

print( 'File:', __file__ )

def mandelbrot(c,max_iters=100):
    i = 0
    z = complex(0,0)
    while abs(z) <= 2 and i < max_iters:
        z = z*z + c
        i += 1
    return i

# initialize pygame
pygame.init()

# create a screen of width=500 and height=500
scr_w, scr_h = 500, 500
screen = pygame.display.set_mode( (scr_w, scr_h) )

# set window caption
pygame.display.set_caption('Fractal Image: Mandelbrot')

# create a clock
clock = pygame.time.Clock()

# create a surface for drawing
surface = pygame.Surface( screen.get_size(), pygame.SRCALPHA )


size=(scr_w/n, scr_h/n)
draw = pygame.Surface(size)


first_create = True

running = True
w2, h2 = scr_w/2, scr_h/2 # half width, half screen
while running:

    if first_create:
        first_create = False
        scale = 0.006
        offset = complex(-0.55,0.0)
        for x in range(scr_w//n):
            for y in range(scr_h//n):
                re = scale*(x-(scr_w/n)) + offset.real
                im = scale*(y-(scr_h/n)) + offset.imag
                c = complex( re, im )
                color = mandelbrot(c, 63)
                r = (color << 6) & 0xc0
                g = (color << 4) & 0xc0
                b = (color << 2) & 0xc0
                #put if
                #wscreen = scr_w/n , hscreen = scr_h/n
                draw.set_at( (x, y), (255-r,255-g,255-b) )

    # draw the surface on the screen
    screen.blit( draw, (0,0) )
    # update the display
    pygame.display.update()

    clock.tick(1.0)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

pygame.quit()
print( 'PyGame done...')
################################################################
